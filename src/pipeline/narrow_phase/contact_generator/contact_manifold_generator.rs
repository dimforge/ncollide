use std::any::Any;
use na::Real;
use utils::IdAllocator;
use shape::Shape;
use query::{ContactManifold, ContactPrediction};
use math::Isometry;

/// Trait implemented algorithms that compute contact points, normals and penetration depths.
pub trait ContactManifoldGenerator<N: Real>: Any + Send + Sync {
    /// Runs the collision detection on two objects. It is assumed that the same
    /// collision detector (the same structure) is always used with the same
    /// pair of object.
    fn update(
        &mut self,
        dispatcher: &ContactDispatcher<N>,
        ida: usize,
        ma: &Isometry<N>,
        a: &Shape<N>,
        idb: usize,
        mb: &Isometry<N>,
        b: &Shape<N>,
        prediction: &ContactPrediction<N>,
        id_alloc: &mut IdAllocator,
    ) -> bool;

    /// Clears all spacial and time coherence information stored by this
    /// generator and frees all its contact indices.
    fn clear(&mut self, id_alloc: &mut IdAllocator);

    /// The number of contacts found.
    fn num_contacts(&self) -> usize;

    /// Collects the contact manifolds generated by the last update.
    fn contacts<'a: 'b, 'b>(&'a self, out: &'b mut Vec<&'a ContactManifold<N>>);
}

pub type ContactAlgorithm<N> = Box<ContactManifoldGenerator<N>>;

pub trait ContactDispatcher<N>: Any + Send + Sync {
    /// Allocate a collision algorithm corresponding to the given pair of shapes.
    fn get_contact_algorithm(
        &self,
        a: &Shape<N>,
        b: &Shape<N>,
    ) -> Option<ContactAlgorithm<N>>;
}
